"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/queries.ts":
/*!****************************!*\
  !*** ./src/lib/queries.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignDeskToEmployee: function() { return /* binding */ assignDeskToEmployee; },\n/* harmony export */   createDesk: function() { return /* binding */ createDesk; },\n/* harmony export */   createEmployee: function() { return /* binding */ createEmployee; },\n/* harmony export */   deleteDesk: function() { return /* binding */ deleteDesk; },\n/* harmony export */   fetchActiveDesks: function() { return /* binding */ fetchActiveDesks; },\n/* harmony export */   fetchActiveEmployees: function() { return /* binding */ fetchActiveEmployees; },\n/* harmony export */   fetchAllDesks: function() { return /* binding */ fetchAllDesks; },\n/* harmony export */   fetchAllEmployees: function() { return /* binding */ fetchAllEmployees; },\n/* harmony export */   fetchAverageStandingTime: function() { return /* binding */ fetchAverageStandingTime; },\n/* harmony export */   fetchEmployeeCount: function() { return /* binding */ fetchEmployeeCount; },\n/* harmony export */   fetchEmployeeLeaderboard: function() { return /* binding */ fetchEmployeeLeaderboard; },\n/* harmony export */   fetchStandingDistribution: function() { return /* binding */ fetchStandingDistribution; },\n/* harmony export */   fetchWeeklyActivity: function() { return /* binding */ fetchWeeklyActivity; },\n/* harmony export */   fetchWeeklyGrowth: function() { return /* binding */ fetchWeeklyGrowth; }\n/* harmony export */ });\n/* harmony import */ var _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/integrations/supabase/client */ \"(app-pages-browser)/./src/integrations/supabase/client.ts\");\n\nasync function fetchEmployeeCount() {\n    const { count } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"employee\").select(\"*\", {\n        count: \"exact\",\n        head: true\n    });\n    return count || 0;\n}\nasync function fetchActiveDesks() {\n    const today = new Date().toISOString().split(\"T\")[0];\n    const { count } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"activity\").select(\"*\", {\n        count: \"exact\",\n        head: true\n    }).eq(\"date\", today);\n    return count || 0;\n}\nasync function fetchAverageStandingTime() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"activity\").select(\"standing_time\").order(\"date\", {\n        ascending: false\n    }).limit(50);\n    if (!(data === null || data === void 0 ? void 0 : data.length)) return 0;\n    const average = data.reduce((acc, curr)=>acc + curr.standing_time, 0) / data.length;\n    return (average / 60).toFixed(1); // Convert minutes to hours\n}\nasync function fetchWeeklyGrowth() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"activity\").select(\"standing_time, date\").order(\"date\", {\n        ascending: false\n    }).limit(14); // Two weeks of data\n    if (!(data === null || data === void 0 ? void 0 : data.length)) return 0;\n    const thisWeek = data.slice(0, 7).reduce((acc, curr)=>acc + curr.standing_time, 0);\n    const lastWeek = data.slice(7, 14).reduce((acc, curr)=>acc + curr.standing_time, 0);\n    if (lastWeek === 0) return 100;\n    const growth = (thisWeek - lastWeek) / lastWeek * 100;\n    return growth.toFixed(0);\n}\nasync function fetchWeeklyActivity() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"activity\").select(\"\\n      standing_time,\\n      date,\\n      desk:desk(\\n        desk_name,\\n        employee:employee(\\n          name\\n        )\\n      )\\n    \").order(\"date\", {\n        ascending: true\n    }).gte(\"date\", new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0]).lte(\"date\", new Date().toISOString().split(\"T\")[0]);\n    // Group by date and calculate total standing time and unique users\n    const dailyStats = (data || []).reduce((acc, activity)=>{\n        var _activity_desk_employee, _activity_desk;\n        const day = new Date(activity.date).toLocaleDateString(\"en-US\", {\n            weekday: \"short\"\n        });\n        if (!acc[day]) {\n            acc[day] = {\n                totalMinutes: 0,\n                uniqueUsers: new Set(),\n                standingHours: {} // Track activity by hour\n            };\n        }\n        acc[day].totalMinutes += activity.standing_time;\n        if ((_activity_desk = activity.desk) === null || _activity_desk === void 0 ? void 0 : (_activity_desk_employee = _activity_desk.employee) === null || _activity_desk_employee === void 0 ? void 0 : _activity_desk_employee.name) {\n            acc[day].uniqueUsers.add(activity.desk.employee.name);\n        }\n        // Track standing time distribution throughout the day\n        const hour = Math.floor(activity.standing_time / 60);\n        acc[day].standingHours[hour] = (acc[day].standingHours[hour] || 0) + 1;\n        return acc;\n    }, {});\n    // Convert to array and calculate percentages\n    return Object.entries(dailyStats).map((param)=>{\n        let [day, stats] = param;\n        var _Object_entries_sort_;\n        return {\n            day,\n            minutes: stats.totalMinutes,\n            uniqueUsers: stats.uniqueUsers.size,\n            averagePerUser: Math.round(stats.totalMinutes / stats.uniqueUsers.size),\n            peakHour: ((_Object_entries_sort_ = Object.entries(stats.standingHours).sort((param, param1)=>{\n                let [, a] = param, [, b] = param1;\n                return b - a;\n            })[0]) === null || _Object_entries_sort_ === void 0 ? void 0 : _Object_entries_sort_[0]) || 0\n        };\n    });\n}\nasync function fetchStandingDistribution() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"activity\").select(\"\\n      standing_time,\\n      desk:desk(\\n        desk_name,\\n        employee:employee(\\n          name\\n        )\\n      )\\n    \").gte(\"date\", new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0]);\n    // Calculate standing time distribution\n    const userStats = (data || []).reduce((acc, activity)=>{\n        var _activity_desk_employee, _activity_desk;\n        const userName = ((_activity_desk = activity.desk) === null || _activity_desk === void 0 ? void 0 : (_activity_desk_employee = _activity_desk.employee) === null || _activity_desk_employee === void 0 ? void 0 : _activity_desk_employee.name) || \"Unknown\";\n        if (!acc[userName]) {\n            acc[userName] = {\n                totalTime: 0,\n                sessions: 0\n            };\n        }\n        acc[userName].totalTime += activity.standing_time;\n        acc[userName].sessions += 1;\n        return acc;\n    }, {});\n    // Convert to array and calculate percentages\n    const total = Object.values(userStats).reduce((sum, param)=>{\n        let { totalTime } = param;\n        return sum + totalTime;\n    }, 0);\n    return Object.entries(userStats).map((param)=>{\n        let [name, stats] = param;\n        return {\n            name,\n            percentage: Math.round(stats.totalTime / total * 100),\n            averageSession: Math.round(stats.totalTime / stats.sessions),\n            totalHours: Math.round(stats.totalTime / 60 * 10) / 10\n        };\n    }).sort((a, b)=>b.percentage - a.percentage);\n}\nasync function fetchActiveEmployees() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"employee\").select(\"\\n      *,\\n      desk:desk(*)\\n    \").limit(3);\n    return (data === null || data === void 0 ? void 0 : data.map((employee)=>({\n            name: employee.name,\n            position: employee.position,\n            standingTime: \"3h 20m\"\n        }))) || [];\n}\nasync function fetchEmployeeLeaderboard() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"employee\").select(\"\\n      *,\\n      desk:desk(desk_id),\\n      activity:desk(\\n        activity(standing_time)\\n      )\\n    \").limit(5);\n    return (data === null || data === void 0 ? void 0 : data.map((employee)=>({\n            name: employee.name,\n            position: employee.position,\n            totalStandingTime: \"4.5\"\n        }))) || [];\n}\nasync function createEmployee(data) {\n    const { data: employee, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"employee\").insert([\n        data\n    ]).select().single();\n    if (error) throw error;\n    return employee;\n}\nasync function fetchAllDesks() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"desk\").select(\"\\n      desk_id,\\n      desk_name,\\n      employee_id,\\n      employee:employee(*)\\n    \");\n    // Transform the data to match our interface\n    return (data || []).map((desk)=>({\n            ...desk,\n            employee: Array.isArray(desk.employee) && desk.employee.length > 0 ? desk.employee[0] : null\n        }));\n}\nasync function assignDeskToEmployee(employeeId, deskId) {\n    if (!deskId) {\n        // Unassign the employee from their current desk\n        const { error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"desk\").update({\n            employee_id: null\n        }).eq(\"employee_id\", parseInt(employeeId));\n        if (error) throw error;\n        return;\n    }\n    // First, unassign any desk currently assigned to this employee\n    await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"desk\").update({\n        employee_id: null\n    }).eq(\"employee_id\", parseInt(employeeId));\n    // Then assign the new desk to the employee\n    const { data, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"desk\").update({\n        employee_id: parseInt(employeeId)\n    }).eq(\"desk_id\", parseInt(deskId)).select(\"\\n      desk_id,\\n      desk_name,\\n      employee_id\\n    \").single();\n    if (error) throw error;\n    return data;\n}\nasync function fetchAllEmployees() {\n    const { data } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"employee\").select(\"\\n      employee_id,\\n      name,\\n      position,\\n      desk(*)\\n    \");\n    // Transform the data to match our interface\n    return (data || []).map((employee)=>({\n            ...employee,\n            desk: Array.isArray(employee.desk) && employee.desk.length > 0 ? employee.desk[0] : null\n        }));\n}\nasync function createDesk(data) {\n    const { data: desk, error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"desk\").insert([\n        {\n            desk_name: data.desk_name\n        }\n    ]).select(\"\\n      desk_id,\\n      desk_name,\\n      employee_id\\n    \").single();\n    if (error) throw error;\n    return desk;\n}\nasync function deleteDesk(deskId) {\n    const { error } = await _integrations_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"desk\").delete().eq(\"desk_id\", deskId);\n    if (error) throw error;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUYsT0FBTyxNQUFNQTtJQUNqQixPQUFPbEU7QUFDVDtBQUVPLGVBQWU4RTtJQUNwQixNQUFNLEVBQUU5RSxJQUFJLEVBQUUsR0FBRyxNQUFNYixtRUFBUUEsQ0FDNUJHLElBQUksQ0FBQyxZQUNMQyxNQUFNLENBQUU7SUFPWCw0Q0FBNEM7SUFDNUMsT0FBTyxDQUFDUyxRQUFRLEVBQUUsRUFBRXVDLEdBQUcsQ0FBQ1IsQ0FBQUEsV0FBYTtZQUNuQyxHQUFHQSxRQUFRO1lBQ1hELE1BQU13QyxNQUFNQyxPQUFPLENBQUN4QyxTQUFTRCxJQUFJLEtBQUtDLFNBQVNELElBQUksQ0FBQzFCLE1BQU0sR0FBRyxJQUFJMkIsU0FBU0QsSUFBSSxDQUFDLEVBQUUsR0FBRztRQUN0RjtBQUNGO0FBRU8sZUFBZWlELFdBQVcvRSxJQUF1RDtJQUN0RixNQUFNLEVBQUVBLE1BQU04QixJQUFJLEVBQUVvQyxLQUFLLEVBQUUsR0FBRyxNQUFNL0UsbUVBQVFBLENBQ3pDRyxJQUFJLENBQUMsUUFDTDZFLE1BQU0sQ0FBQztRQUFDO1lBQUVhLFdBQVdoRixLQUFLZ0YsU0FBUztRQUFDO0tBQUUsRUFDdEN6RixNQUFNLENBQUUsK0RBS1I2RSxNQUFNO0lBRVQsSUFBSUYsT0FBTyxNQUFNQTtJQUNqQixPQUFPcEM7QUFDVDtBQUVPLGVBQWVtRCxXQUFXUCxNQUFjO0lBQzdDLE1BQU0sRUFBRVIsS0FBSyxFQUFFLEdBQUcsTUFBTS9FLG1FQUFRQSxDQUM3QkcsSUFBSSxDQUFDLFFBQ0w0RixNQUFNLEdBQ05wRixFQUFFLENBQUMsV0FBVzRFO0lBRWpCLElBQUlSLE9BQU8sTUFBTUE7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9xdWVyaWVzLnRzP2ZlMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiQC9pbnRlZ3JhdGlvbnMvc3VwYWJhc2UvY2xpZW50XCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEVtcGxveWVlQ291bnQoKSB7XG4gIGNvbnN0IHsgY291bnQgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJlbXBsb3llZVwiKVxuICAgIC5zZWxlY3QoXCIqXCIsIHsgY291bnQ6IFwiZXhhY3RcIiwgaGVhZDogdHJ1ZSB9KTtcbiAgcmV0dXJuIGNvdW50IHx8IDA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEFjdGl2ZURlc2tzKCkge1xuICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdChcIlRcIilbMF07XG4gIGNvbnN0IHsgY291bnQgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJhY3Rpdml0eVwiKVxuICAgIC5zZWxlY3QoXCIqXCIsIHsgY291bnQ6IFwiZXhhY3RcIiwgaGVhZDogdHJ1ZSB9KVxuICAgIC5lcShcImRhdGVcIiwgdG9kYXkpO1xuICByZXR1cm4gY291bnQgfHwgMDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQXZlcmFnZVN0YW5kaW5nVGltZSgpIHtcbiAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKFwiYWN0aXZpdHlcIilcbiAgICAuc2VsZWN0KFwic3RhbmRpbmdfdGltZVwiKVxuICAgIC5vcmRlcihcImRhdGVcIiwgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgLmxpbWl0KDUwKTtcblxuICBpZiAoIWRhdGE/Lmxlbmd0aCkgcmV0dXJuIDA7XG4gIGNvbnN0IGF2ZXJhZ2UgPSBkYXRhLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyLnN0YW5kaW5nX3RpbWUsIDApIC8gZGF0YS5sZW5ndGg7XG4gIHJldHVybiAoYXZlcmFnZSAvIDYwKS50b0ZpeGVkKDEpOyAvLyBDb252ZXJ0IG1pbnV0ZXMgdG8gaG91cnNcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoV2Vla2x5R3Jvd3RoKCkge1xuICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJhY3Rpdml0eVwiKVxuICAgIC5zZWxlY3QoXCJzdGFuZGluZ190aW1lLCBkYXRlXCIpXG4gICAgLm9yZGVyKFwiZGF0ZVwiLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcbiAgICAubGltaXQoMTQpOyAvLyBUd28gd2Vla3Mgb2YgZGF0YVxuXG4gIGlmICghZGF0YT8ubGVuZ3RoKSByZXR1cm4gMDtcblxuICBjb25zdCB0aGlzV2VlayA9IGRhdGEuc2xpY2UoMCwgNykucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIuc3RhbmRpbmdfdGltZSwgMCk7XG4gIGNvbnN0IGxhc3RXZWVrID0gZGF0YS5zbGljZSg3LCAxNCkucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIuc3RhbmRpbmdfdGltZSwgMCk7XG5cbiAgaWYgKGxhc3RXZWVrID09PSAwKSByZXR1cm4gMTAwO1xuICBjb25zdCBncm93dGggPSAoKHRoaXNXZWVrIC0gbGFzdFdlZWspIC8gbGFzdFdlZWspICogMTAwO1xuICByZXR1cm4gZ3Jvd3RoLnRvRml4ZWQoMCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFdlZWtseUFjdGl2aXR5KCkge1xuICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJhY3Rpdml0eVwiKVxuICAgIC5zZWxlY3QoYFxuICAgICAgc3RhbmRpbmdfdGltZSxcbiAgICAgIGRhdGUsXG4gICAgICBkZXNrOmRlc2soXG4gICAgICAgIGRlc2tfbmFtZSxcbiAgICAgICAgZW1wbG95ZWU6ZW1wbG95ZWUoXG4gICAgICAgICAgbmFtZVxuICAgICAgICApXG4gICAgICApXG4gICAgYClcbiAgICAub3JkZXIoJ2RhdGUnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuICAgIC5ndGUoJ2RhdGUnLCBuZXcgRGF0ZShEYXRlLm5vdygpIC0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXSlcbiAgICAubHRlKCdkYXRlJywgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0pO1xuXG4gIC8vIEdyb3VwIGJ5IGRhdGUgYW5kIGNhbGN1bGF0ZSB0b3RhbCBzdGFuZGluZyB0aW1lIGFuZCB1bmlxdWUgdXNlcnNcbiAgY29uc3QgZGFpbHlTdGF0cyA9IChkYXRhIHx8IFtdKS5yZWR1Y2UoKGFjYywgYWN0aXZpdHkpID0+IHtcbiAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZShhY3Rpdml0eS5kYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywgeyB3ZWVrZGF5OiAnc2hvcnQnIH0pO1xuICAgIGlmICghYWNjW2RheV0pIHtcbiAgICAgIGFjY1tkYXldID0ge1xuICAgICAgICB0b3RhbE1pbnV0ZXM6IDAsXG4gICAgICAgIHVuaXF1ZVVzZXJzOiBuZXcgU2V0KCksXG4gICAgICAgIHN0YW5kaW5nSG91cnM6IHt9IC8vIFRyYWNrIGFjdGl2aXR5IGJ5IGhvdXJcbiAgICAgIH07XG4gICAgfVxuICAgIGFjY1tkYXldLnRvdGFsTWludXRlcyArPSBhY3Rpdml0eS5zdGFuZGluZ190aW1lO1xuICAgIGlmIChhY3Rpdml0eS5kZXNrPy5lbXBsb3llZT8ubmFtZSkge1xuICAgICAgYWNjW2RheV0udW5pcXVlVXNlcnMuYWRkKGFjdGl2aXR5LmRlc2suZW1wbG95ZWUubmFtZSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFRyYWNrIHN0YW5kaW5nIHRpbWUgZGlzdHJpYnV0aW9uIHRocm91Z2hvdXQgdGhlIGRheVxuICAgIGNvbnN0IGhvdXIgPSBNYXRoLmZsb29yKGFjdGl2aXR5LnN0YW5kaW5nX3RpbWUgLyA2MCk7XG4gICAgYWNjW2RheV0uc3RhbmRpbmdIb3Vyc1tob3VyXSA9IChhY2NbZGF5XS5zdGFuZGluZ0hvdXJzW2hvdXJdIHx8IDApICsgMTtcbiAgICBcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCB7IHRvdGFsTWludXRlczogbnVtYmVyOyB1bmlxdWVVc2VyczogU2V0PHN0cmluZz47IHN0YW5kaW5nSG91cnM6IFJlY29yZDxudW1iZXIsIG51bWJlcj4gfT4pO1xuXG4gIC8vIENvbnZlcnQgdG8gYXJyYXkgYW5kIGNhbGN1bGF0ZSBwZXJjZW50YWdlc1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZGFpbHlTdGF0cykubWFwKChbZGF5LCBzdGF0c10pID0+ICh7XG4gICAgZGF5LFxuICAgIG1pbnV0ZXM6IHN0YXRzLnRvdGFsTWludXRlcyxcbiAgICB1bmlxdWVVc2Vyczogc3RhdHMudW5pcXVlVXNlcnMuc2l6ZSxcbiAgICBhdmVyYWdlUGVyVXNlcjogTWF0aC5yb3VuZChzdGF0cy50b3RhbE1pbnV0ZXMgLyBzdGF0cy51bmlxdWVVc2Vycy5zaXplKSxcbiAgICBwZWFrSG91cjogT2JqZWN0LmVudHJpZXMoc3RhdHMuc3RhbmRpbmdIb3VycylcbiAgICAgIC5zb3J0KChbLGFdLCBbLGJdKSA9PiBiIC0gYSlbMF0/LlswXSB8fCAwXG4gIH0pKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoU3RhbmRpbmdEaXN0cmlidXRpb24oKSB7XG4gIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbShcImFjdGl2aXR5XCIpXG4gICAgLnNlbGVjdChgXG4gICAgICBzdGFuZGluZ190aW1lLFxuICAgICAgZGVzazpkZXNrKFxuICAgICAgICBkZXNrX25hbWUsXG4gICAgICAgIGVtcGxveWVlOmVtcGxveWVlKFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgKVxuICAgICAgKVxuICAgIGApXG4gICAgLmd0ZSgnZGF0ZScsIG5ldyBEYXRlKERhdGUubm93KCkgLSA3ICogMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdKTtcblxuICAvLyBDYWxjdWxhdGUgc3RhbmRpbmcgdGltZSBkaXN0cmlidXRpb25cbiAgY29uc3QgdXNlclN0YXRzID0gKGRhdGEgfHwgW10pLnJlZHVjZSgoYWNjLCBhY3Rpdml0eSkgPT4ge1xuICAgIGNvbnN0IHVzZXJOYW1lID0gYWN0aXZpdHkuZGVzaz8uZW1wbG95ZWU/Lm5hbWUgfHwgJ1Vua25vd24nO1xuICAgIGlmICghYWNjW3VzZXJOYW1lXSkge1xuICAgICAgYWNjW3VzZXJOYW1lXSA9IHtcbiAgICAgICAgdG90YWxUaW1lOiAwLFxuICAgICAgICBzZXNzaW9uczogMFxuICAgICAgfTtcbiAgICB9XG4gICAgYWNjW3VzZXJOYW1lXS50b3RhbFRpbWUgKz0gYWN0aXZpdHkuc3RhbmRpbmdfdGltZTtcbiAgICBhY2NbdXNlck5hbWVdLnNlc3Npb25zICs9IDE7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgeyB0b3RhbFRpbWU6IG51bWJlcjsgc2Vzc2lvbnM6IG51bWJlciB9Pik7XG5cbiAgLy8gQ29udmVydCB0byBhcnJheSBhbmQgY2FsY3VsYXRlIHBlcmNlbnRhZ2VzXG4gIGNvbnN0IHRvdGFsID0gT2JqZWN0LnZhbHVlcyh1c2VyU3RhdHMpLnJlZHVjZSgoc3VtLCB7IHRvdGFsVGltZSB9KSA9PiBzdW0gKyB0b3RhbFRpbWUsIDApO1xuICBcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHVzZXJTdGF0cylcbiAgICAubWFwKChbbmFtZSwgc3RhdHNdKSA9PiAoe1xuICAgICAgbmFtZSxcbiAgICAgIHBlcmNlbnRhZ2U6IE1hdGgucm91bmQoKHN0YXRzLnRvdGFsVGltZSAvIHRvdGFsKSAqIDEwMCksXG4gICAgICBhdmVyYWdlU2Vzc2lvbjogTWF0aC5yb3VuZChzdGF0cy50b3RhbFRpbWUgLyBzdGF0cy5zZXNzaW9ucyksXG4gICAgICB0b3RhbEhvdXJzOiBNYXRoLnJvdW5kKHN0YXRzLnRvdGFsVGltZSAvIDYwICogMTApIC8gMTBcbiAgICB9KSlcbiAgICAuc29ydCgoYSwgYikgPT4gYi5wZXJjZW50YWdlIC0gYS5wZXJjZW50YWdlKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQWN0aXZlRW1wbG95ZWVzKCkge1xuICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJlbXBsb3llZVwiKVxuICAgIC5zZWxlY3QoYFxuICAgICAgKixcbiAgICAgIGRlc2s6ZGVzaygqKVxuICAgIGApXG4gICAgLmxpbWl0KDMpO1xuXG4gIHJldHVybiAoXG4gICAgZGF0YT8ubWFwKChlbXBsb3llZSkgPT4gKHtcbiAgICAgIG5hbWU6IGVtcGxveWVlLm5hbWUsXG4gICAgICBwb3NpdGlvbjogZW1wbG95ZWUucG9zaXRpb24sXG4gICAgICBzdGFuZGluZ1RpbWU6IFwiM2ggMjBtXCIsIC8vIFRoaXMgd291bGQgbmVlZCB0byBiZSBjYWxjdWxhdGVkIGZyb20gYWN0aXZpdHkgZGF0YVxuICAgIH0pKSB8fCBbXVxuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hFbXBsb3llZUxlYWRlcmJvYXJkKCkge1xuICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJlbXBsb3llZVwiKVxuICAgIC5zZWxlY3QoYFxuICAgICAgKixcbiAgICAgIGRlc2s6ZGVzayhkZXNrX2lkKSxcbiAgICAgIGFjdGl2aXR5OmRlc2soXG4gICAgICAgIGFjdGl2aXR5KHN0YW5kaW5nX3RpbWUpXG4gICAgICApXG4gICAgYClcbiAgICAubGltaXQoNSk7XG5cbiAgcmV0dXJuIChcbiAgICBkYXRhPy5tYXAoKGVtcGxveWVlKSA9PiAoe1xuICAgICAgbmFtZTogZW1wbG95ZWUubmFtZSxcbiAgICAgIHBvc2l0aW9uOiBlbXBsb3llZS5wb3NpdGlvbixcbiAgICAgIHRvdGFsU3RhbmRpbmdUaW1lOiBcIjQuNVwiLCAvLyBUaGlzIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgYWN0aXZpdHkgZGF0YVxuICAgIH0pKSB8fCBbXVxuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW1wbG95ZWUoZGF0YTogeyBuYW1lOiBzdHJpbmc7IHBvc2l0aW9uOiBzdHJpbmcgfSkge1xuICBjb25zdCB7IGRhdGE6IGVtcGxveWVlLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbShcImVtcGxveWVlXCIpXG4gICAgLmluc2VydChbZGF0YV0pXG4gICAgLnNlbGVjdCgpXG4gICAgLnNpbmdsZSgpO1xuXG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIHJldHVybiBlbXBsb3llZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoQWxsRGVza3MoKSB7XG4gIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbShcImRlc2tcIilcbiAgICAuc2VsZWN0KGBcbiAgICAgIGRlc2tfaWQsXG4gICAgICBkZXNrX25hbWUsXG4gICAgICBlbXBsb3llZV9pZCxcbiAgICAgIGVtcGxveWVlOmVtcGxveWVlKCopXG4gICAgYCk7XG5cbiAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIG1hdGNoIG91ciBpbnRlcmZhY2VcbiAgcmV0dXJuIChkYXRhIHx8IFtdKS5tYXAoZGVzayA9PiAoe1xuICAgIC4uLmRlc2ssXG4gICAgZW1wbG95ZWU6IEFycmF5LmlzQXJyYXkoZGVzay5lbXBsb3llZSkgJiYgZGVzay5lbXBsb3llZS5sZW5ndGggPiAwID8gZGVzay5lbXBsb3llZVswXSA6IG51bGxcbiAgfSkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzaWduRGVza1RvRW1wbG95ZWUoZW1wbG95ZWVJZDogc3RyaW5nLCBkZXNrSWQ6IHN0cmluZyB8IG51bGwpIHtcbiAgaWYgKCFkZXNrSWQpIHtcbiAgICAvLyBVbmFzc2lnbiB0aGUgZW1wbG95ZWUgZnJvbSB0aGVpciBjdXJyZW50IGRlc2tcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oXCJkZXNrXCIpXG4gICAgICAudXBkYXRlKHsgZW1wbG95ZWVfaWQ6IG51bGwgYXMgdW5rbm93biBhcyB1bmRlZmluZWQgfSlcbiAgICAgIC5lcShcImVtcGxveWVlX2lkXCIsIHBhcnNlSW50KGVtcGxveWVlSWQpKTtcbiAgICBcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpcnN0LCB1bmFzc2lnbiBhbnkgZGVzayBjdXJyZW50bHkgYXNzaWduZWQgdG8gdGhpcyBlbXBsb3llZVxuICBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKFwiZGVza1wiKVxuICAgIC51cGRhdGUoeyBlbXBsb3llZV9pZDogbnVsbCBhcyB1bmtub3duIGFzIHVuZGVmaW5lZCB9KVxuICAgIC5lcShcImVtcGxveWVlX2lkXCIsIHBhcnNlSW50KGVtcGxveWVlSWQpKTtcblxuICAvLyBUaGVuIGFzc2lnbiB0aGUgbmV3IGRlc2sgdG8gdGhlIGVtcGxveWVlXG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJkZXNrXCIpXG4gICAgLnVwZGF0ZSh7IGVtcGxveWVlX2lkOiBwYXJzZUludChlbXBsb3llZUlkKSB9KVxuICAgIC5lcShcImRlc2tfaWRcIiwgcGFyc2VJbnQoZGVza0lkKSlcbiAgICAuc2VsZWN0KGBcbiAgICAgIGRlc2tfaWQsXG4gICAgICBkZXNrX25hbWUsXG4gICAgICBlbXBsb3llZV9pZFxuICAgIGApXG4gICAgLnNpbmdsZSgpO1xuXG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBbGxFbXBsb3llZXMoKSB7XG4gIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbShcImVtcGxveWVlXCIpXG4gICAgLnNlbGVjdChgXG4gICAgICBlbXBsb3llZV9pZCxcbiAgICAgIG5hbWUsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIGRlc2soKilcbiAgICBgKTtcbiAgXG4gIC8vIFRyYW5zZm9ybSB0aGUgZGF0YSB0byBtYXRjaCBvdXIgaW50ZXJmYWNlXG4gIHJldHVybiAoZGF0YSB8fCBbXSkubWFwKGVtcGxveWVlID0+ICh7XG4gICAgLi4uZW1wbG95ZWUsXG4gICAgZGVzazogQXJyYXkuaXNBcnJheShlbXBsb3llZS5kZXNrKSAmJiBlbXBsb3llZS5kZXNrLmxlbmd0aCA+IDAgPyBlbXBsb3llZS5kZXNrWzBdIDogbnVsbFxuICB9KSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVEZXNrKGRhdGE6IHsgZGVza19uYW1lOiBzdHJpbmc7IGVtcGxveWVlX2lkOiBudW1iZXIgfCBudWxsIH0pIHtcbiAgY29uc3QgeyBkYXRhOiBkZXNrLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbShcImRlc2tcIilcbiAgICAuaW5zZXJ0KFt7IGRlc2tfbmFtZTogZGF0YS5kZXNrX25hbWUgfV0gYXMgYW55KVxuICAgIC5zZWxlY3QoYFxuICAgICAgZGVza19pZCxcbiAgICAgIGRlc2tfbmFtZSxcbiAgICAgIGVtcGxveWVlX2lkXG4gICAgYClcbiAgICAuc2luZ2xlKCk7XG5cbiAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgcmV0dXJuIGRlc2s7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVEZXNrKGRlc2tJZDogbnVtYmVyKSB7XG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oXCJkZXNrXCIpXG4gICAgLmRlbGV0ZSgpXG4gICAgLmVxKFwiZGVza19pZFwiLCBkZXNrSWQpO1xuXG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG59Il0sIm5hbWVzIjpbInN1cGFiYXNlIiwiZmV0Y2hFbXBsb3llZUNvdW50IiwiY291bnQiLCJmcm9tIiwic2VsZWN0IiwiaGVhZCIsImZldGNoQWN0aXZlRGVza3MiLCJ0b2RheSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwiZXEiLCJmZXRjaEF2ZXJhZ2VTdGFuZGluZ1RpbWUiLCJkYXRhIiwib3JkZXIiLCJhc2NlbmRpbmciLCJsaW1pdCIsImxlbmd0aCIsImF2ZXJhZ2UiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwic3RhbmRpbmdfdGltZSIsInRvRml4ZWQiLCJmZXRjaFdlZWtseUdyb3d0aCIsInRoaXNXZWVrIiwic2xpY2UiLCJsYXN0V2VlayIsImdyb3d0aCIsImZldGNoV2Vla2x5QWN0aXZpdHkiLCJndGUiLCJub3ciLCJsdGUiLCJkYWlseVN0YXRzIiwiYWN0aXZpdHkiLCJkYXkiLCJkYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwid2Vla2RheSIsInRvdGFsTWludXRlcyIsInVuaXF1ZVVzZXJzIiwiU2V0Iiwic3RhbmRpbmdIb3VycyIsImRlc2siLCJlbXBsb3llZSIsIm5hbWUiLCJhZGQiLCJob3VyIiwiTWF0aCIsImZsb29yIiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcCIsInN0YXRzIiwibWludXRlcyIsInNpemUiLCJhdmVyYWdlUGVyVXNlciIsInJvdW5kIiwicGVha0hvdXIiLCJzb3J0IiwiYSIsImIiLCJmZXRjaFN0YW5kaW5nRGlzdHJpYnV0aW9uIiwidXNlclN0YXRzIiwidXNlck5hbWUiLCJ0b3RhbFRpbWUiLCJzZXNzaW9ucyIsInRvdGFsIiwidmFsdWVzIiwic3VtIiwicGVyY2VudGFnZSIsImF2ZXJhZ2VTZXNzaW9uIiwidG90YWxIb3VycyIsImZldGNoQWN0aXZlRW1wbG95ZWVzIiwicG9zaXRpb24iLCJzdGFuZGluZ1RpbWUiLCJmZXRjaEVtcGxveWVlTGVhZGVyYm9hcmQiLCJ0b3RhbFN0YW5kaW5nVGltZSIsImNyZWF0ZUVtcGxveWVlIiwiZXJyb3IiLCJpbnNlcnQiLCJzaW5nbGUiLCJmZXRjaEFsbERlc2tzIiwiQXJyYXkiLCJpc0FycmF5IiwiYXNzaWduRGVza1RvRW1wbG95ZWUiLCJlbXBsb3llZUlkIiwiZGVza0lkIiwidXBkYXRlIiwiZW1wbG95ZWVfaWQiLCJwYXJzZUludCIsImZldGNoQWxsRW1wbG95ZWVzIiwiY3JlYXRlRGVzayIsImRlc2tfbmFtZSIsImRlbGV0ZURlc2siLCJkZWxldGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/queries.ts\n"));

/***/ })

});